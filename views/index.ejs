<!DOCTYPE html>
<html lang="en-US">

<head>
  <%- include ('partials/head.ejs') %>
</head>

<body>
  <div id="vue-app">

    <%- include ('partials/sidebar.ejs') %>
      <%- include ('partials/top-navbar.ejs') %>
        <%- include ('partials/right-sidebar.ejs') %>

          <div id="content-page" class="content-page">
            <div id="app" class="container">
              <div class="row">
                <div class="col-lg-8 row m-0 p-0">

                  <div class="iq-card-footer" v-if="errorMessage">
                    <div class="alert alert-danger text-bold ml-3 mr-3" role="alert">
                      <strong>
                        {{errorMessage}}
                      </strong>
                    </div>
                  </div>

                  <!-- Import the create post form -->
                  <%- include ('partials/create-post.ejs') %>

                    <!-- Divider -->
                    <div class="col-sm-12">
                      <hr class="mt-0">
                    </div>

                    <!-- Post -->
                    <div v-for="(post, index) in posts" class="col-sm-12 famblrPost">
                      <div class="iq-card iq-card-block iq-card-stretch iq-card-height">
                        <div class="iq-card-body">
                          <div class="user-post-data">
                            <div class="d-flex flex-wrap">

                              <!-- Post Profile Image -->
                              <div class="media-support-user-img mr-3">
                                <img class="rounded-circle img-fluid"
                                  v-bind:src="post.userId.profilePicture ? '/uploads/' + post.userId.profilePicture : '/images/profile.png'"
                                  alt="">
                              </div>

                              <!-- Post Name and Date -->
                              <div class="media-support-info mt-2">
                                <h5 class="mb-0 d-inline-block"><a href="#" class="">
                                    {{post.userId.firstName}} {{post.userId.lastName}}</a></h5>
                                <p class="mb-0 text-primary">{{ formatDate(post.date)}}</p>
                              </div>

                              <!-- Post Context Menu -->
                              <div v-if="post.userId._id == user._id" class="iq-card-post-toolbar">
                                <div class="dropdown">
                                  <span class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true"
                                    aria-expanded="false" role="button">
                                    <i class="ri-more-fill"></i>
                                  </span>
                                  <div class="dropdown-menu m-0 p-0">
                                    <a class="dropdown-item p-3" v-bind:href="`/posts/${post._id}/edit`">
                                      <div class="d-flex align-items-top">
                                        <div class="icon font-size-20"><i class="ri-edit-line"></i></div>
                                        <div class="data ml-2">
                                          <h6>Edit Post</h6>
                                          <p class="mb-0">Make changes to your post</p>
                                        </div>
                                      </div>
                                    </a>
                                    <a class="dropdown-item p-3" type="button" data-toggle="modal"
                                      data-target="#deleteModal" @click="postToDelete = post._id">
                                      <div class="d-flex align-items-top">
                                        <div class="icon font-size-20"><i class="ri-close-circle-line"></i></div>
                                        <div class="data ml-2">
                                          <h6>Delete Post</h6>
                                          <p class="mb-0">Permanently remove this post</p>
                                        </div>
                                      </div>
                                    </a>
                                  </div>
                                </div>
                              </div>

                            </div>
                          </div>

                          <!-- Post Text -->
                          <div class="mt-3">
                            <p>{{ post.text }}</p>
                          </div>

                          <!-- Post Image -->
                          <div v-if="post.image" class="user-post">
                            <a><img v-bind:src="`/uploads/${post.image}`" alt="post-image"
                                class="img-fluid rounded w-100"></a>
                          </div>

                          <div class="comment-area mt-3">
                            <hr>
                            <!-- Comments -->

                            <%- include('partials/create-comment.ejs') %>

                          </div>

                        </div>
                      </div>
                    </div>
                    <!-- End of Posts -->

                    <div v-if="morePostsToLoad" class="col-sm-12 text-center">
                      <image src="/images/spinner_transparent.gif" style="margin: 0 auto;"></image>
                    </div>

                    <!-- Confrim Delete Modal -->
                    <div id="deleteModal" class="modal fade" tabindex="-1" role="dialog"
                      aria-labelledby="deleteModalTitle" aria-hidden="true">
                      <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered" role="document">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h5 class="modal-title" id="deleteModalTitle">Delete Post</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                              <span aria-hidden="true">Ã—</span>
                            </button>
                          </div>
                          <div class="modal-body">
                            <p>Are you sure you want to delete this post?</p>
                          </div>
                          <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal"
                              @click="postToDelete = null">Cancel</button>
                            <button type="button" class="btn btn-danger" @click="deletePost()">
                              Delete Post
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                </div>
              </div>
            </div>
          </div>
  </div>

  <%- include ('partials/footer.ejs') %>
    <%- include ('partials/js-imports.ejs') %>

      <script>
        var socket = io();

        const vueApp = new Vue({
          el: '#vue-app',
          data: {
            user: null,
            loading: true,
            limit: 5,
            offset: 0,
            totalItems: null,
            posts: [],
            postToDelete: null,
            newPost: {
              text: "",
              image: null
            },
            errorMessage: null
          },
          created: function () {
            // Initialize Socket Listeners
            socket.on('new-post', (postData) => {
              // console.log(`New Post: `, postData)

              // add post from socket IF not already in list
              if (!this.posts.some(post => post._id === postData._id)) {
                this.posts = [postData, ...this.posts]
              }
            });

            socket.on('new-comment', (commentData) => {
              // console.log(`New Comment: `, commentData)
            });

          },
          mounted: async function () {
            axios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.famblrToken}`;

            await this.getCurrentUser()

            await this.loadPosts();

            //Add watcher to load more posts when window scrolls to bottom of page
            window.onscroll = () => {
              let bottomOfWindow =
                document.documentElement.scrollTop + window.innerHeight ===
                document.documentElement.offsetHeight;
              if (bottomOfWindow) {
                this.loadPosts(this.query);
              }
            };
          },
          computed: {
            morePostsToLoad: function () {
              return this.posts.length !== this.totalItems;
            }
          },
          methods: {
            getCurrentUser: async function () {
              try {
                let response = await axios.get(`/api/users/current`)
                this.user = response.data.user;

              } catch (error) {
                console.error(error)
                window.location.href = '/logout'
              }
            },
            createPost: async function () {
              try {
                this.errorMessage = null;

                // Save new post to DB
                let response = await axios.post(`/api/posts`, {
                  contentText: this.newPost.text
                });

                let postData = response.data;

                // Add new post to list of posts if not there from socket
                if (!this.posts.some(post => post._id === postData._id)) {
                  this.posts = [postData, ...this.posts]
                }

                // Reset New Post Input
                this.newPost.text = "";
                this.newPost.image = null;

              } catch (error) {
                console.error(error);
                this.errorMessage = error.response.data.error;
              }
            },
            createComment: async function (postId) {
              return await axios.post('/api/comments', {
                relatedPost: postId,
                content: document.getElementById(postId).value
              }).then(response => {
                // console.log("Comment Created Successfully!")
                // console.log(response)
                document.getElementById(postId).value = null;
              })
            },
            loadPosts: async function () {
              if (this.offset > this.totalItems) {
                this.totalItems = this.posts.length;
                return;
              }
              try {
                this.loading = true;
                let response = await axios.get(`/api/posts?limit=${this.limit}&offset=${this.offset}`)

                let loadedPosts = response.data.allPosts;

                this.loadComments(loadedPosts)

                this.posts = [
                  ...this.posts,
                  ...loadedPosts
                ];
                this.totalItems = response.data.totalItems;

                this.offset += this.limit;

              } catch (error) {
                console.error(error)

              } finally {
                this.loading = false;
              }
            },
            loadComments: async function (posts) {
              const self = this;
              for (let onePost of posts) {
                const response = await axios.get(`/api/comments/post/${onePost._id}`);
                const commentsList = response.data;
                onePost.comments = [...onePost.comments, ...commentsList];
              }
            },
            deletePost: async function () {
              try {
                // console.log("Deleting: ", this.postToDelete)

                let response = await axios.delete(`/api/posts/${this.postToDelete}`)
                // console.log("Post Deleted from DB")

                this.posts = this.posts.filter(post => {
                  return post._id != this.postToDelete
                })

                this.postToDelete = null;
                $('#deleteModal').modal('hide')

              } catch (error) {
                console.error(error)
              }
            },
            formatDate(date) {
              return new Date(date).toLocaleString()
            }
          },
        })
      </script>

</body>

</html>